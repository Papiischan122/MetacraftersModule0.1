// SPDX-License-Identifier: MIT
pragma solidity ^0.8.25;

contract Llanes {
    uint256 public value;

    // Function to set a new value if it's between 200 and 3000
    function setValue(uint256 _newValue) external {
        require(_newValue >= 200 && _newValue <= 3000, "Value must be between 200 and 3000");
        value = _newValue;
    }

    // Function to assert that a given number is even
    function assertValue(uint256 _num) external pure returns (uint256) {
        assert(_num % 2 == 0);
        return _num;
    }

    // Function to revert if the given number is not a multiple of 5
    function revertValue(uint256 _num) external pure returns (uint256) {
        if (_num % 5 != 0) {
            revert("Value must be a multiple of 5");
        }
        return _num;
    }
}
