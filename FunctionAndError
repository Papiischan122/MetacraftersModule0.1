// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract LlanesStore {
    struct Item {
        string name;
        uint price;
        uint stock;
    }

    mapping(uint => Item) public inventory;
    uint public totalSales;
    address public owner;

    event ItemAdded(uint itemId, string name, uint price, uint stock);
    event ItemPurchased(uint itemId, uint quantity, uint totalCost);

    modifier onlyOwner() {
        require(msg.sender == owner, "Only the owner can perform this action");
        _;
    }

    constructor() {
        owner = msg.sender;
    }

    function addItem(uint itemId, string memory name, uint price, uint stock) public onlyOwner {
        require(price > 0, "Price must be greater than zero");
        require(stock > 0, "Stock must be greater than zero");

        inventory[itemId] = Item(name, price, stock);
        emit ItemAdded(itemId, name, price, stock);
    }

    function purchaseItem(uint itemId, uint quantity) public payable {
        Item storage item = inventory[itemId];
        require(item.price > 0, "Item does not exist");
        require(item.stock >= quantity, "Not enough stock available");
        uint totalCost = item.price * quantity;
        require(msg.value == totalCost, "Incorrect amount of Ether sent");

        item.stock -= quantity;
        totalSales += totalCost;
        emit ItemPurchased(itemId, quantity, totalCost);
    }

    function checkStock(uint itemId) public view returns (uint) {
        Item storage item = inventory[itemId];
        require(item.price > 0, "Item does not exist");
        return item.stock;
    }

    function getTotalSales() public view returns (uint) {
        return totalSales;
    }
}

