// SPDX-License-Identifier: MIT
pragma solidity >=0.7.0 <0.9.0;

contract GreatestNumber {

    uint public number1;
    uint public number2;
    uint public number3;
    uint public number4;
    address public owner;

    constructor() {
        owner = msg.sender;
    }

    modifier onlyOwner { 
        require(owner == msg.sender, "Only the contract owner can access this function");
        _;
    }

    // Function to set the numbers with error handling for zero values
    function setNumbers(uint _number1, uint _number2, uint _number3, uint _number4) public onlyOwner {
        require(_number1 > 0, "Number1 must be greater than zero");
        require(_number2 > 0, "Number2 must be greater than zero");
        require(_number3 > 0, "Number3 must be greater than zero");
        require(_number4 > 0, "Number4 must be greater than zero");
        
        number1 = _number1;
        number2 = _number2;
        number3 = _number3;
        number4 = _number4;
    }

    // Function to get the greatest number with a revert example
    function getGreatestNumber() public view onlyOwner returns(uint) {
        uint greatest = number1;

        if (number2 > greatest) {
            greatest = number2;
        }
        if (number3 > greatest) {
            greatest = number3;
        }
        if (number4 > greatest) {
            greatest = number4;
        }

        // Revert if no greatest number found (shouldn't happen in this logic, just for demonstration)
        if (greatest == 0) {
            revert("No valid greatest number found");
        }

        return greatest;
    }

    // Function to demonstrate an assert statement
    function checkGreaterThanZero(uint _number) public pure returns(bool) {
        assert(_number > 0); // This will throw an error if _number is not greater than zero
        return true;
    }

    // Additional function to demonstrate revert explicitly
    function resetNumbers() public onlyOwner {
        // Check if numbers are already zero
        if (number1 == 0 && number2 == 0 && number3 == 0 && number4 == 0) {
            revert("All numbers are already zero");
        }

        number1 = 0;
        number2 = 0;
        number3 = 0;
        number4 = 0;
    }
}

      

